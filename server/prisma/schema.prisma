generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  fullname     String
  password     String
  transactions Transaction[]
  category     Category[]
  Profile      Profile?
  Session      Session[]
  Goal         Goal[]
  Investment   Investment[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  type        String   @default("expense")
  description String?
  amount      Decimal
  status      String // "ongoing", "complete"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  @@index([type, status])
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  transaction Transaction[]
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  description   String?
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investment {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  type        String // e.g., "stock", "real estate", "crypto"
  riskLevel   String // e.g., "Low", "Medium", "High"
  returns     Float    @default(0.0)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  type      String // e.g., "friend_request", "game_invite"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // recipientId String
  // recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  read      Boolean  @default(false)
}
